package com.big.openweather.dataimport android.util.Logimport androidx.arch.core.executor.testing.InstantTaskExecutorRuleimport androidx.lifecycle.Observerimport com.big.openweather.BuildConfig.API_Keyimport com.big.openweather.data.remote.NetworkServiceimport com.big.openweather.data.remote.response.weatherdetails.Cityimport com.big.openweather.data.remote.response.weatherdetails.Coordimport com.big.openweather.data.remote.response.weatherdetails.Json4Kotlin_Baseimport org.junit.Assert.assertEqualsimport org.junit.Beforeimport org.junit.Ruleimport org.junit.Testimport org.junit.runner.RunWithimport org.mockito.Mockimport org.mockito.Mockito.*import org.mockito.MockitoAnnotationsimport org.powermock.api.mockito.PowerMockitoimport org.powermock.api.mockito.PowerMockito.mockimport org.powermock.core.classloader.annotations.PrepareForTestimport org.powermock.modules.junit4.PowerMockRunnerimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Response@RunWith(PowerMockRunner::class)@PrepareForTest(Response::class, Call::class, NetworkService::class, Log::class)internal class RepositoryTest {    @Rule    var instantRule = InstantTaskExecutorRule()    private var repository: Repository? = null    @Mock    @JvmField    val networkService: NetworkService? = null    @Mock    @JvmField    var call: Call<Json4Kotlin_Base>? = null    @Mock    @JvmField    var serverCall: Call<Json4Kotlin_Base>? = null    @Mock    @JvmField    var response: Response<Json4Kotlin_Base>? = null    @Test    fun testServerResponse_Fail_404() {        val observer: Observer<Json4Kotlin_Base> = mock(Observer::class.java) as Observer<Json4Kotlin_Base>        // Mocking        `when`(networkService!!.getLiveData(apiKey = API_Key, queryText = "London"))                .thenReturn(serverCall)        `when`(serverCall!!.enqueue(any())).then {            (it.arguments[0] as Callback<Json4Kotlin_Base>)                    .onResponse(call, response)        }        // Mocking the server response        `when`(response!!.code()).thenReturn(404)        `when`(response!!.isSuccessful).thenReturn(true)        // Actual Invocation        repository = Repository(networkService!!)        repository!!.weatherLiveData.observeForever(observer)        repository!!.getWeatherReport("London")        // Verification        verify(observer).onChanged(null)        assertEquals(repository!!.weatherLiveData.value, null)        assertEquals(response!!.code(), 404)        assertEquals(response!!.isSuccessful, true)    }    @Test    fun testServerResponse_Success_200() {        val observer: Observer<Json4Kotlin_Base> = mock(Observer::class.java) as Observer<Json4Kotlin_Base>        val json4KotlinBase = buildDummyResponse()        // Mocking        `when`(networkService!!.getLiveData(apiKey = API_Key, queryText = "London"))                .thenReturn(serverCall)        `when`(serverCall!!.enqueue(any())).then {            (it.arguments[0] as Callback<Json4Kotlin_Base>)                    .onResponse(call, response)        }        // Mocking the server response        `when`(response!!.code()).thenReturn(200)        `when`(response!!.isSuccessful).thenReturn(true)        `when`(response!!.body()).thenReturn(json4KotlinBase)        // Actual Invocation        repository = Repository(networkService!!)        repository!!.weatherLiveData.observeForever(observer)        repository!!.getWeatherReport("London")        // Verification        verify(observer).onChanged(json4KotlinBase)        assertEquals(repository!!.weatherLiveData.value, json4KotlinBase)        assertEquals(response!!.code(), 200)        assertEquals(response!!.isSuccessful, true)        assertEquals(response!!.body()?.cnt, json4KotlinBase.cnt)    }    private fun buildDummyResponse(): Json4Kotlin_Base = Json4Kotlin_Base(1, 20, 10, ArrayList(),            City(12, "LONDON", Coord(12.0, 13.0), "GB", 12, 13, 10, 10))    @Before    fun setUp() {        PowerMockito.mockStatic(Response::class.java, Log::class.java)        MockitoAnnotations.initMocks(this)    }}